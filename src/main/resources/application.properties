# ===============================
# = Application configurations
# ===============================

jwt.secret=gcs
#time.expiration.otp is in minute
time.expiration.otp = 10
time.expiration.token.minute = 300
# ===============================
# = QR CONFIGURATION
# ===============================
neo.qr.jwt.sign.algorithm = HS256
neo.qr.jwt.sign.key.size = 32
neo.qr.jwt.sign.key = 2LWozS73QoYZcGfbpxDQEW3fqBLoxJlm

time.expiration.token.minute.qr= 5000
neo.qr.key.store.password = keystorepassword
neo.qr.secret.key.password = mono40cryptoqr
#neo.qr.secret.key.alias = app-cryptoqr-secret
neo.qr.secret.key.alias = app-cryptoqr-secret
neo.qr.secret.key.location =C:/Users/rrojas/IdeaProjects/CryptoQR-services/src/main/resources/cryptoQRKeyStore.jceks



# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

spring.datasource.url= jdbc:postgresql://localhost:5432/CryptoQR
#spring.datasource.url= jdbc:postgresql://10.225.192.61:5432/cryptoqr


# Username and password LOCAL
spring.datasource.username=postgres
spring.datasource.password=postgres

#QA environment
#spring.datasource.username=mono40
#spring.datasource.password=Prueba100


# ===============================
# SERVER
# ===============================

# Context Path
server.context-path=/api/cryptoqr
server.port=8091

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true
spring.jpa.generate-ddl=true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

spring.jpa.hibernate.use-new-id-generator-mappings=true

spring.datasource.driver-class-name=org.postgresql.Driver

# Allows Hibernate to generate SQL optimized for a particular DBMS
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect


#spring.datasource.tomcat.test-on-borrow=true
